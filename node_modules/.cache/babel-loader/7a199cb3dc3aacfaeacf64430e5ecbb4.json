{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\testt\\\\src\\\\uikit\\\\widgets\\\\Modal\\\\ModalContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Overlay from \"../../components/Overlay/Overlay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: ${({\n  theme\n}) => theme.zIndices.modal - 1};\n`;\n_c = ModalWrapper;\nexport const Context = /*#__PURE__*/createContext({\n  onPresent: () => null,\n  onDismiss: () => null,\n  setCloseOnOverlayClick: () => true\n});\n\nconst ModalProvider = ({\n  children\n}) => {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [modalNode, setModalNode] = useState();\n  const [closeOnOverlayClick, setCloseOnOverlayClick] = useState(true);\n\n  const handlePresent = node => {\n    setModalNode(node);\n    setIsOpen(true);\n  };\n\n  const handleDismiss = () => {\n    setModalNode(undefined);\n    setIsOpen(false);\n  };\n\n  const handleOverlayDismiss = () => {\n    if (closeOnOverlayClick) {\n      handleDismiss();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      onPresent: handlePresent,\n      onDismiss: handleDismiss,\n      setCloseOnOverlayClick\n    },\n    children: [isOpen && /*#__PURE__*/_jsxDEV(ModalWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Overlay, {\n        show: true,\n        onClick: handleOverlayDismiss\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/React.isValidElement(modalNode) && /*#__PURE__*/React.cloneElement(modalNode, {\n        onDismiss: handleDismiss\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ModalProvider, \"zFN0k91a2Z5tiXHqB3NuwIm7MNk=\");\n\n_c2 = ModalProvider;\nexport default ModalProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ModalWrapper\");\n$RefreshReg$(_c2, \"ModalProvider\");","map":{"version":3,"sources":["C:/Users/Asus/Desktop/testt/src/uikit/widgets/Modal/ModalContext.tsx"],"names":["React","createContext","useState","styled","Overlay","ModalWrapper","div","theme","zIndices","modal","Context","onPresent","onDismiss","setCloseOnOverlayClick","ModalProvider","children","isOpen","setIsOpen","modalNode","setModalNode","closeOnOverlayClick","handlePresent","node","handleDismiss","undefined","handleOverlayDismiss","isValidElement","cloneElement"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,kCAApB;;AASA,MAAMC,YAAY,GAAGF,MAAM,CAACG,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,QAAN,CAAeC,KAAf,GAAuB,CAAE;AACrD,CAXA;KAAMJ,Y;AAaN,OAAO,MAAMK,OAAO,gBAAGT,aAAa,CAAgB;AAClDU,EAAAA,SAAS,EAAE,MAAM,IADiC;AAElDC,EAAAA,SAAS,EAAE,MAAM,IAFiC;AAGlDC,EAAAA,sBAAsB,EAAE,MAAM;AAHoB,CAAhB,CAA7B;;AAMP,MAAMC,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAChD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,EAA1C;AACA,QAAM,CAACkB,mBAAD,EAAsBP,sBAAtB,IAAgDX,QAAQ,CAAC,IAAD,CAA9D;;AAEA,QAAMmB,aAAa,GAAIC,IAAD,IAA2B;AAC/CH,IAAAA,YAAY,CAACG,IAAD,CAAZ;AACAL,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GAHD;;AAKA,QAAMM,aAAa,GAAG,MAAM;AAC1BJ,IAAAA,YAAY,CAACK,SAAD,CAAZ;AACAP,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAHD;;AAKA,QAAMQ,oBAAoB,GAAG,MAAM;AACjC,QAAIL,mBAAJ,EAAyB;AACvBG,MAAAA,aAAa;AACd;AACF,GAJD;;AAMA,sBACE,QAAC,OAAD,CAAS,QAAT;AACE,IAAA,KAAK,EAAE;AACLZ,MAAAA,SAAS,EAAEU,aADN;AAELT,MAAAA,SAAS,EAAEW,aAFN;AAGLV,MAAAA;AAHK,KADT;AAAA,eAOGG,MAAM,iBACL,QAAC,YAAD;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,IAAI,MAAb;AAAc,QAAA,OAAO,EAAES;AAAvB;AAAA;AAAA;AAAA;AAAA,cADF,EAEG,aAAAzB,KAAK,CAAC0B,cAAN,CAAqBR,SAArB,kBACClB,KAAK,CAAC2B,YAAN,CAAmBT,SAAnB,EAA8B;AAC5BN,QAAAA,SAAS,EAAEW;AADiB,OAA9B,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,EAgBGR,QAhBH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAzCD;;GAAMD,a;;MAAAA,a;AA2CN,eAAeA,aAAf","sourcesContent":["import React, { createContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Overlay from \"../../components/Overlay/Overlay\";\nimport { Handler } from \"./types\";\n\ninterface ModalsContext {\n  onPresent: (node: React.ReactNode, key?: string) => void;\n  onDismiss: Handler;\n  setCloseOnOverlayClick: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst ModalWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: ${({ theme }) => theme.zIndices.modal - 1};\n`;\n\nexport const Context = createContext<ModalsContext>({\n  onPresent: () => null,\n  onDismiss: () => null,\n  setCloseOnOverlayClick: () => true,\n});\n\nconst ModalProvider: React.FC = ({ children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [modalNode, setModalNode] = useState<React.ReactNode>();\n  const [closeOnOverlayClick, setCloseOnOverlayClick] = useState(true);\n\n  const handlePresent = (node: React.ReactNode) => {\n    setModalNode(node);\n    setIsOpen(true);\n  };\n\n  const handleDismiss = () => {\n    setModalNode(undefined);\n    setIsOpen(false);\n  };\n\n  const handleOverlayDismiss = () => {\n    if (closeOnOverlayClick) {\n      handleDismiss();\n    }\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        onPresent: handlePresent,\n        onDismiss: handleDismiss,\n        setCloseOnOverlayClick,\n      }}\n    >\n      {isOpen && (\n        <ModalWrapper>\n          <Overlay show onClick={handleOverlayDismiss} />\n          {React.isValidElement(modalNode) &&\n            React.cloneElement(modalNode, {\n              onDismiss: handleDismiss,\n            })}\n        </ModalWrapper>\n      )}\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default ModalProvider;\n"]},"metadata":{},"sourceType":"module"}