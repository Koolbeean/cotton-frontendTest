{"ast":null,"code":"import _slicedToArray from\"C:/Users/yupoh/Desktop/cotton-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"C:/Users/yupoh/Desktop/cotton-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:/Users/yupoh/Desktop/cotton-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useEffect,useState}from\"react\";import{breakpointMap}from\"../theme/base\";/**\r\n * Can't use the media queries from \"base.mediaQueries\" because of how matchMedia works\r\n * In order for the listener to trigger we need have have the media query with a range, e.g.\r\n * (min-width: 370px) and (max-width: 576px)\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList\r\n */var mediaQueries=function(){var prevMinWidth=0;return Object.keys(breakpointMap).reduce(function(accum,size,index){// Largest size is just a min-width of second highest max-width\nif(index===Object.keys(breakpointMap).length-1){return _objectSpread(_objectSpread({},accum),{},_defineProperty({},size,\"(min-width: \".concat(prevMinWidth,\"px)\")));}var minWidth=prevMinWidth;var breakpoint=breakpointMap[size];// Min width for next iteration\nprevMinWidth=breakpoint+1;return _objectSpread(_objectSpread({},accum),{},_defineProperty({},size,\"(min-width: \".concat(minWidth,\"px) and (max-width: \").concat(breakpoint,\"px)\")));},{});}();var getKey=function getKey(size){return\"is\".concat(size.charAt(0).toUpperCase()).concat(size.slice(1));};var useMatchBreakpoints=function useMatchBreakpoints(){var _useState=useState(function(){return Object.keys(mediaQueries).reduce(function(accum,size){var key=getKey(size);var mql=window.matchMedia(mediaQueries[size]);return _objectSpread(_objectSpread({},accum),{},_defineProperty({},key,mql.matches));},{});}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];useEffect(function(){// Create listeners for each media query returning a function to unsubscribe\nvar handlers=Object.keys(mediaQueries).map(function(size){var mql=window.matchMedia(mediaQueries[size]);var handler=function handler(matchMediaQuery){var key=getKey(size);setState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},key,matchMediaQuery.matches));});};// Safari < 14 fix\nif(mql.addEventListener){mql.addEventListener(\"change\",handler);}return function(){// Safari < 14 fix\nif(mql.removeEventListener){mql.removeEventListener(\"change\",handler);}};});return function(){handlers.forEach(function(unsubscribe){unsubscribe();});};},[setState]);return state;};export default useMatchBreakpoints;","map":{"version":3,"sources":["C:/Users/yupoh/Desktop/cotton-frontend/src/uikit/hooks/useMatchBreakpoints.ts"],"names":["useEffect","useState","breakpointMap","mediaQueries","prevMinWidth","Object","keys","reduce","accum","size","index","length","minWidth","breakpoint","getKey","charAt","toUpperCase","slice","useMatchBreakpoints","key","mql","window","matchMedia","matches","state","setState","handlers","map","handler","matchMediaQuery","prevState","addEventListener","removeEventListener","forEach","unsubscribe"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { breakpointMap } from \"../theme/base\";\r\n\r\ntype State = {\r\n  [key: string]: boolean;\r\n};\r\n\r\ntype MediaQueries = {\r\n  [key: string]: string;\r\n};\r\n\r\n/**\r\n * Can't use the media queries from \"base.mediaQueries\" because of how matchMedia works\r\n * In order for the listener to trigger we need have have the media query with a range, e.g.\r\n * (min-width: 370px) and (max-width: 576px)\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList\r\n */\r\nconst mediaQueries: MediaQueries = (() => {\r\n  let prevMinWidth = 0;\r\n\r\n  return Object.keys(breakpointMap).reduce((accum, size, index) => {\r\n    // Largest size is just a min-width of second highest max-width\r\n    if (index === Object.keys(breakpointMap).length - 1) {\r\n      return { ...accum, [size]: `(min-width: ${prevMinWidth}px)` };\r\n    }\r\n\r\n    const minWidth = prevMinWidth;\r\n    const breakpoint = breakpointMap[size];\r\n\r\n    // Min width for next iteration\r\n    prevMinWidth = breakpoint + 1;\r\n\r\n    return { ...accum, [size]: `(min-width: ${minWidth}px) and (max-width: ${breakpoint}px)` };\r\n  }, {});\r\n})();\r\n\r\nconst getKey = (size: string) => `is${size.charAt(0).toUpperCase()}${size.slice(1)}`;\r\n\r\nconst useMatchBreakpoints = (): State => {\r\n  const [state, setState] = useState<State>(() => {\r\n    return Object.keys(mediaQueries).reduce((accum, size) => {\r\n      const key = getKey(size);\r\n      const mql = window.matchMedia(mediaQueries[size]);\r\n      return { ...accum, [key]: mql.matches };\r\n    }, {});\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Create listeners for each media query returning a function to unsubscribe\r\n    const handlers = Object.keys(mediaQueries).map((size) => {\r\n      const mql = window.matchMedia(mediaQueries[size]);\r\n\r\n      const handler = (matchMediaQuery: MediaQueryListEvent) => {\r\n        const key = getKey(size);\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          [key]: matchMediaQuery.matches,\r\n        }));\r\n      };\r\n\r\n      // Safari < 14 fix\r\n      if (mql.addEventListener) {\r\n        mql.addEventListener(\"change\", handler);\r\n      }\r\n\r\n      return () => {\r\n        // Safari < 14 fix\r\n        if (mql.removeEventListener) {\r\n          mql.removeEventListener(\"change\", handler);\r\n        }\r\n      };\r\n    });\r\n\r\n    return () => {\r\n      handlers.forEach((unsubscribe) => {\r\n        unsubscribe();\r\n      });\r\n    };\r\n  }, [setState]);\r\n\r\n  return state;\r\n};\r\n\r\nexport default useMatchBreakpoints;\r\n"]},"metadata":{},"sourceType":"module"}