{"ast":null,"code":"import _objectSpread from\"C:/Users/yupoh/Desktop/cotton-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/yupoh/Desktop/cotton-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"C:/Users/yupoh/Desktop/cotton-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _taggedTemplateLiteral from\"C:/Users/yupoh/Desktop/cotton-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React,{useState}from\"react\";import styled from\"styled-components\";import Text from\"../../components/Text/Text\";import{CopyIcon}from\"../../components/Svg\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyleButton=styled(Text).attrs({role:\"button\"})(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  position: relative;\\n  display: flex;\\n  align-items: center;\\n  color: \",\";\\n\"])),function(_ref){var theme=_ref.theme;return theme.colors.primary;});var Tooltip=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  display: \",\";\\n  position: absolute;\\n  bottom: -22px;\\n  right: 0;\\n  left: 0;\\n  text-align: center;\\n  background-color: \",\";\\n  color: \",\";\\n  border-radius: 16px;\\n  opacity: 0.7;\\n\"])),function(_ref2){var isTooltipDisplayed=_ref2.isTooltipDisplayed;return isTooltipDisplayed?\"block\":\"none\";},function(_ref3){var theme=_ref3.theme;return theme.colors.contrast;},function(_ref4){var theme=_ref4.theme;return theme.colors.invertedContrast;});var CopyToClipboard=function CopyToClipboard(_ref5){var toCopy=_ref5.toCopy,children=_ref5.children,props=_objectWithoutProperties(_ref5,[\"toCopy\",\"children\"]);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isTooltipDisplayed=_useState2[0],setIsTooltipDisplayed=_useState2[1];return/*#__PURE__*/_jsxs(StyleButton,_objectSpread(_objectSpread({small:true,bold:true,onClick:function onClick(){if(navigator.clipboard){navigator.clipboard.writeText(toCopy);setIsTooltipDisplayed(true);setTimeout(function(){setIsTooltipDisplayed(false);},1000);}}},props),{},{children:[children,/*#__PURE__*/_jsx(CopyIcon,{width:\"20px\",color:\"primary\",ml:\"4px\"}),/*#__PURE__*/_jsx(Tooltip,{isTooltipDisplayed:isTooltipDisplayed,children:\"Copied\"})]}));};export default CopyToClipboard;","map":{"version":3,"sources":["C:/Users/yupoh/Desktop/cotton-frontend/src/uikit/widgets/WalletModal/CopyToClipboard.tsx"],"names":["React","useState","styled","Text","CopyIcon","StyleButton","attrs","role","theme","colors","primary","Tooltip","div","isTooltipDisplayed","contrast","invertedContrast","CopyToClipboard","toCopy","children","props","setIsTooltipDisplayed","navigator","clipboard","writeText","setTimeout"],"mappings":"4rBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,4BAAjB,CACA,OAASC,QAAT,KAAyB,sBAAzB,C,wFAMA,GAAMC,CAAAA,WAAW,CAAGH,MAAM,CAACC,IAAD,CAAN,CAAaG,KAAb,CAAmB,CAAEC,IAAI,CAAE,QAAR,CAAnB,CAAH,mJAIN,kBAAGC,CAAAA,KAAH,MAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,MAAN,CAAaC,OAA5B,EAJM,CAAjB,CAOA,GAAMC,CAAAA,OAAO,CAAGT,MAAM,CAACU,GAAV,iQACA,mBAAGC,CAAAA,kBAAH,OAAGA,kBAAH,OAA6BA,CAAAA,kBAAkB,CAAG,OAAH,CAAa,MAA5D,EADA,CAOS,mBAAGL,CAAAA,KAAH,OAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,MAAN,CAAaK,QAA5B,EAPT,CAQF,mBAAGN,CAAAA,KAAH,OAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,MAAN,CAAaM,gBAA5B,EARE,CAAb,CAaA,GAAMC,CAAAA,eAAgC,CAAG,QAAnCA,CAAAA,eAAmC,OAAoC,IAAjCC,CAAAA,MAAiC,OAAjCA,MAAiC,CAAzBC,QAAyB,OAAzBA,QAAyB,CAAZC,KAAY,uDAC3E,cAAoDlB,QAAQ,CAAC,KAAD,CAA5D,wCAAOY,kBAAP,eAA2BO,qBAA3B,eAEA,mBACE,MAAC,WAAD,8BACE,KAAK,KADP,CAEE,IAAI,KAFN,CAGE,OAAO,CAAE,kBAAM,CACb,GAAIC,SAAS,CAACC,SAAd,CAAyB,CACvBD,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BN,MAA9B,EACAG,qBAAqB,CAAC,IAAD,CAArB,CACAI,UAAU,CAAC,UAAM,CACfJ,qBAAqB,CAAC,KAAD,CAArB,CACD,CAFS,CAEP,IAFO,CAAV,CAGD,CACF,CAXH,EAYMD,KAZN,gBAcGD,QAdH,cAeE,KAAC,QAAD,EAAU,KAAK,CAAC,MAAhB,CAAuB,KAAK,CAAC,SAA7B,CAAuC,EAAE,CAAC,KAA1C,EAfF,cAgBE,KAAC,OAAD,EAAS,kBAAkB,CAAEL,kBAA7B,oBAhBF,IADF,CAoBD,CAvBD,CAyBA,cAAeG,CAAAA,eAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Text from \"../../components/Text/Text\";\r\nimport { CopyIcon } from \"../../components/Svg\";\r\n\r\ninterface Props {\r\n  toCopy: string;\r\n}\r\n\r\nconst StyleButton = styled(Text).attrs({ role: \"button\" })`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n`;\r\n\r\nconst Tooltip = styled.div<{ isTooltipDisplayed: boolean }>`\r\n  display: ${({ isTooltipDisplayed }) => (isTooltipDisplayed ? \"block\" : \"none\")};\r\n  position: absolute;\r\n  bottom: -22px;\r\n  right: 0;\r\n  left: 0;\r\n  text-align: center;\r\n  background-color: ${({ theme }) => theme.colors.contrast};\r\n  color: ${({ theme }) => theme.colors.invertedContrast};\r\n  border-radius: 16px;\r\n  opacity: 0.7;\r\n`;\r\n\r\nconst CopyToClipboard: React.FC<Props> = ({ toCopy, children, ...props }) => {\r\n  const [isTooltipDisplayed, setIsTooltipDisplayed] = useState(false);\r\n\r\n  return (\r\n    <StyleButton\r\n      small\r\n      bold\r\n      onClick={() => {\r\n        if (navigator.clipboard) {\r\n          navigator.clipboard.writeText(toCopy);\r\n          setIsTooltipDisplayed(true);\r\n          setTimeout(() => {\r\n            setIsTooltipDisplayed(false);\r\n          }, 1000);\r\n        }\r\n      }}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <CopyIcon width=\"20px\" color=\"primary\" ml=\"4px\" />\r\n      <Tooltip isTooltipDisplayed={isTooltipDisplayed}>Copied</Tooltip>\r\n    </StyleButton>\r\n  );\r\n};\r\n\r\nexport default CopyToClipboard;\r\n"]},"metadata":{},"sourceType":"module"}