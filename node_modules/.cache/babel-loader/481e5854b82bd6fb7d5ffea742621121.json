{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\testt\\\\src\\\\uikit\\\\widgets\\\\Menu\\\\PanelBody.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useLocation } from \"react-router-dom\";\nimport * as IconModule from \"./icons\";\nimport Accordion from \"./Accordion\";\nimport { MenuEntry, LinkLabel } from \"./MenuEntry\";\nimport MenuLink from \"./MenuLink\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Icons = IconModule;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  overflow-x: hidden;\n  height: 100%;\n`;\n_c = Container;\n\nconst PanelBody = ({\n  isPushed,\n  pushNav,\n  isMobile,\n  links\n}) => {\n  _s();\n\n  const location = useLocation(); // Close the menu when a user clicks a link on mobile\n\n  const handleClick = isMobile ? () => pushNav(false) : undefined;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: links.map(entry => {\n      const Icon = Icons[entry.icon];\n\n      const iconElement = /*#__PURE__*/_jsxDEV(Icon, {\n        width: \"24px\",\n        mr: \"8px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 29\n      }, this);\n\n      const calloutClass = entry.calloutClass ? entry.calloutClass : undefined;\n\n      if (entry.items) {\n        return /*#__PURE__*/_jsxDEV(Accordion, {\n          isPushed: isPushed,\n          pushNav: pushNav,\n          icon: iconElement,\n          label: entry.label,\n          initialOpenState: entry.initialOpenState,\n          className: calloutClass,\n          children: isPushed && entry.items.map(item => /*#__PURE__*/_jsxDEV(MenuEntry, {\n            secondary: true,\n            isActive: item.href === location.pathname,\n            onClick: handleClick,\n            children: /*#__PURE__*/_jsxDEV(MenuLink, {\n              href: item.href,\n              children: item.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 21\n            }, this)\n          }, item.href, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 19\n          }, this))\n        }, entry.label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(MenuEntry, {\n        isActive: entry.href === location.pathname,\n        className: calloutClass,\n        children: /*#__PURE__*/_jsxDEV(MenuLink, {\n          href: entry.href,\n          onClick: handleClick,\n          children: [iconElement, /*#__PURE__*/_jsxDEV(LinkLabel, {\n            isPushed: isPushed,\n            children: entry.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, entry.label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PanelBody, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n\n_c2 = PanelBody;\nexport default PanelBody;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"PanelBody\");","map":{"version":3,"sources":["C:/Users/Asus/Desktop/testt/src/uikit/widgets/Menu/PanelBody.tsx"],"names":["React","styled","useLocation","IconModule","Accordion","MenuEntry","LinkLabel","MenuLink","Icons","Container","div","PanelBody","isPushed","pushNav","isMobile","links","location","handleClick","undefined","map","entry","Icon","icon","iconElement","calloutClass","items","label","initialOpenState","item","href","pathname"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { useLocation } from \"react-router-dom\";\nimport { SvgProps } from \"../../components/Svg\";\nimport * as IconModule from \"./icons\";\nimport Accordion from \"./Accordion\";\nimport { MenuEntry, LinkLabel } from \"./MenuEntry\";\nimport MenuLink from \"./MenuLink\";\nimport { PanelProps, PushedProps } from \"./types\";\n\ninterface Props extends PanelProps, PushedProps {\n  isMobile: boolean;\n}\n\nconst Icons = (IconModule as unknown) as { [key: string]: React.FC<SvgProps> };\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  overflow-x: hidden;\n  height: 100%;\n`;\n\nconst PanelBody: React.FC<Props> = ({ isPushed, pushNav, isMobile, links }) => {\n  const location = useLocation();\n\n  // Close the menu when a user clicks a link on mobile\n  const handleClick = isMobile ? () => pushNav(false) : undefined;\n\n  return (\n    <Container>\n      {links.map((entry) => {\n        const Icon = Icons[entry.icon];\n        const iconElement = <Icon width=\"24px\" mr=\"8px\" />;\n        const calloutClass = entry.calloutClass ? entry.calloutClass : undefined;\n\n        if (entry.items) {\n          return (\n            <Accordion\n              key={entry.label}\n              isPushed={isPushed}\n              pushNav={pushNav}\n              icon={iconElement}\n              label={entry.label}\n              initialOpenState={entry.initialOpenState}\n              className={calloutClass}\n            >\n              {isPushed &&\n                entry.items.map((item) => (\n                  <MenuEntry key={item.href} secondary isActive={item.href === location.pathname} onClick={handleClick}>\n                    <MenuLink href={item.href}>{item.label}</MenuLink>\n                  </MenuEntry>\n                ))}\n            </Accordion>\n          );\n        }\n        return (\n          <MenuEntry key={entry.label} isActive={entry.href === location.pathname} className={calloutClass}>\n            <MenuLink href={entry.href} onClick={handleClick}>\n              {iconElement}\n              <LinkLabel isPushed={isPushed}>{entry.label}</LinkLabel>\n            </MenuLink>\n          </MenuEntry>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default PanelBody;\n"]},"metadata":{},"sourceType":"module"}