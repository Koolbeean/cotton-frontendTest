{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\testt\\\\src\\\\uikit\\\\widgets\\\\WalletModal\\\\CopyToClipboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Text from \"../../components/Text/Text\";\nimport { CopyIcon } from \"../../components/Svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyleButton = styled(Text).attrs({\n  role: \"button\"\n})`\n  position: relative;\n  display: flex;\n  align-items: center;\n  color: ${({\n  theme\n}) => theme.colors.primary};\n`;\n_c = StyleButton;\nconst Tooltip = styled.div`\n  display: ${({\n  isTooltipDisplayed\n}) => isTooltipDisplayed ? \"block\" : \"none\"};\n  position: absolute;\n  bottom: -22px;\n  right: 0;\n  left: 0;\n  text-align: center;\n  background-color: ${({\n  theme\n}) => theme.colors.contrast};\n  color: ${({\n  theme\n}) => theme.colors.invertedContrast};\n  border-radius: 16px;\n  opacity: 0.7;\n`;\n_c2 = Tooltip;\n\nconst CopyToClipboard = ({\n  toCopy,\n  children,\n  ...props\n}) => {\n  _s();\n\n  const [isTooltipDisplayed, setIsTooltipDisplayed] = useState(false);\n  return /*#__PURE__*/_jsxDEV(StyleButton, {\n    small: true,\n    bold: true,\n    onClick: () => {\n      if (navigator.clipboard) {\n        navigator.clipboard.writeText(toCopy);\n        setIsTooltipDisplayed(true);\n        setTimeout(() => {\n          setIsTooltipDisplayed(false);\n        }, 1000);\n      }\n    },\n    ...props,\n    children: [children, /*#__PURE__*/_jsxDEV(CopyIcon, {\n      width: \"20px\",\n      color: \"primary\",\n      ml: \"4px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      isTooltipDisplayed: isTooltipDisplayed,\n      children: \"Copied\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CopyToClipboard, \"aMuvB0XmblIz4mlhiBKuWqHL5iE=\");\n\n_c3 = CopyToClipboard;\nexport default CopyToClipboard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyleButton\");\n$RefreshReg$(_c2, \"Tooltip\");\n$RefreshReg$(_c3, \"CopyToClipboard\");","map":{"version":3,"sources":["C:/Users/Asus/Desktop/testt/src/uikit/widgets/WalletModal/CopyToClipboard.tsx"],"names":["React","useState","styled","Text","CopyIcon","StyleButton","attrs","role","theme","colors","primary","Tooltip","div","isTooltipDisplayed","contrast","invertedContrast","CopyToClipboard","toCopy","children","props","setIsTooltipDisplayed","navigator","clipboard","writeText","setTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,SAASC,QAAT,QAAyB,sBAAzB;;AAMA,MAAMC,WAAW,GAAGH,MAAM,CAACC,IAAD,CAAN,CAAaG,KAAb,CAAmB;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAnB,CAAuC;AAC3D;AACA;AACA;AACA,WAAW,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,MAAN,CAAaC,OAAQ;AAC/C,CALA;KAAML,W;AAON,MAAMM,OAAO,GAAGT,MAAM,CAACU,GAAqC;AAC5D,aAAa,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA6BA,kBAAkB,GAAG,OAAH,GAAa,MAAQ;AACjF;AACA;AACA;AACA;AACA;AACA,sBAAsB,CAAC;AAAEL,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,MAAN,CAAaK,QAAS;AAC3D,WAAW,CAAC;AAAEN,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,MAAN,CAAaM,gBAAiB;AACxD;AACA;AACA,CAXA;MAAMJ,O;;AAaN,MAAMK,eAAgC,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,QAAV;AAAoB,KAAGC;AAAvB,CAAD,KAAoC;AAAA;;AAC3E,QAAM,CAACN,kBAAD,EAAqBO,qBAArB,IAA8CnB,QAAQ,CAAC,KAAD,CAA5D;AAEA,sBACE,QAAC,WAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,MAFN;AAGE,IAAA,OAAO,EAAE,MAAM;AACb,UAAIoB,SAAS,CAACC,SAAd,EAAyB;AACvBD,QAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BN,MAA9B;AACAG,QAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAI,QAAAA,UAAU,CAAC,MAAM;AACfJ,UAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD,SAFS,EAEP,IAFO,CAAV;AAGD;AACF,KAXH;AAAA,OAYMD,KAZN;AAAA,eAcGD,QAdH,eAeE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAC,MAAhB;AAAuB,MAAA,KAAK,EAAC,SAA7B;AAAuC,MAAA,EAAE,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,YAfF,eAgBE,QAAC,OAAD;AAAS,MAAA,kBAAkB,EAAEL,kBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAvBD;;GAAMG,e;;MAAAA,e;AAyBN,eAAeA,eAAf","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Text from \"../../components/Text/Text\";\nimport { CopyIcon } from \"../../components/Svg\";\n\ninterface Props {\n  toCopy: string;\n}\n\nconst StyleButton = styled(Text).attrs({ role: \"button\" })`\n  position: relative;\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.primary};\n`;\n\nconst Tooltip = styled.div<{ isTooltipDisplayed: boolean }>`\n  display: ${({ isTooltipDisplayed }) => (isTooltipDisplayed ? \"block\" : \"none\")};\n  position: absolute;\n  bottom: -22px;\n  right: 0;\n  left: 0;\n  text-align: center;\n  background-color: ${({ theme }) => theme.colors.contrast};\n  color: ${({ theme }) => theme.colors.invertedContrast};\n  border-radius: 16px;\n  opacity: 0.7;\n`;\n\nconst CopyToClipboard: React.FC<Props> = ({ toCopy, children, ...props }) => {\n  const [isTooltipDisplayed, setIsTooltipDisplayed] = useState(false);\n\n  return (\n    <StyleButton\n      small\n      bold\n      onClick={() => {\n        if (navigator.clipboard) {\n          navigator.clipboard.writeText(toCopy);\n          setIsTooltipDisplayed(true);\n          setTimeout(() => {\n            setIsTooltipDisplayed(false);\n          }, 1000);\n        }\n      }}\n      {...props}\n    >\n      {children}\n      <CopyIcon width=\"20px\" color=\"primary\" ml=\"4px\" />\n      <Tooltip isTooltipDisplayed={isTooltipDisplayed}>Copied</Tooltip>\n    </StyleButton>\n  );\n};\n\nexport default CopyToClipboard;\n"]},"metadata":{},"sourceType":"module"}