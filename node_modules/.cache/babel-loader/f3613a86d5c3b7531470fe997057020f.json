{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { breakpointMap } from \"../theme/base\";\n\n/**\n * Can't use the media queries from \"base.mediaQueries\" because of how matchMedia works\n * In order for the listener to trigger we need have have the media query with a range, e.g.\n * (min-width: 370px) and (max-width: 576px)\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList\n */\nconst mediaQueries = (() => {\n  let prevMinWidth = 0;\n  return Object.keys(breakpointMap).reduce((accum, size, index) => {\n    // Largest size is just a min-width of second highest max-width\n    if (index === Object.keys(breakpointMap).length - 1) {\n      return { ...accum,\n        [size]: `(min-width: ${prevMinWidth}px)`\n      };\n    }\n\n    const minWidth = prevMinWidth;\n    const breakpoint = breakpointMap[size]; // Min width for next iteration\n\n    prevMinWidth = breakpoint + 1;\n    return { ...accum,\n      [size]: `(min-width: ${minWidth}px) and (max-width: ${breakpoint}px)`\n    };\n  }, {});\n})();\n\nconst getKey = size => `is${size.charAt(0).toUpperCase()}${size.slice(1)}`;\n\nconst useMatchBreakpoints = () => {\n  _s();\n\n  const [state, setState] = useState(() => {\n    return Object.keys(mediaQueries).reduce((accum, size) => {\n      const key = getKey(size);\n      const mql = window.matchMedia(mediaQueries[size]);\n      return { ...accum,\n        [key]: mql.matches\n      };\n    }, {});\n  });\n  useEffect(() => {\n    // Create listeners for each media query returning a function to unsubscribe\n    const handlers = Object.keys(mediaQueries).map(size => {\n      const mql = window.matchMedia(mediaQueries[size]);\n\n      const handler = matchMediaQuery => {\n        const key = getKey(size);\n        setState(prevState => ({ ...prevState,\n          [key]: matchMediaQuery.matches\n        }));\n      }; // Safari < 14 fix\n\n\n      if (mql.addEventListener) {\n        mql.addEventListener(\"change\", handler);\n      }\n\n      return () => {\n        // Safari < 14 fix\n        if (mql.removeEventListener) {\n          mql.removeEventListener(\"change\", handler);\n        }\n      };\n    });\n    return () => {\n      handlers.forEach(unsubscribe => {\n        unsubscribe();\n      });\n    };\n  }, [setState]);\n  return state;\n};\n\n_s(useMatchBreakpoints, \"uHZpe0W+HFvxc1umru9X5G76RF0=\");\n\nexport default useMatchBreakpoints;","map":{"version":3,"sources":["C:/Users/Asus/Desktop/testt/src/uikit/hooks/useMatchBreakpoints.ts"],"names":["useEffect","useState","breakpointMap","mediaQueries","prevMinWidth","Object","keys","reduce","accum","size","index","length","minWidth","breakpoint","getKey","charAt","toUpperCase","slice","useMatchBreakpoints","state","setState","key","mql","window","matchMedia","matches","handlers","map","handler","matchMediaQuery","prevState","addEventListener","removeEventListener","forEach","unsubscribe"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,eAA9B;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAA0B,GAAG,CAAC,MAAM;AACxC,MAAIC,YAAY,GAAG,CAAnB;AAEA,SAAOC,MAAM,CAACC,IAAP,CAAYJ,aAAZ,EAA2BK,MAA3B,CAAkC,CAACC,KAAD,EAAQC,IAAR,EAAcC,KAAd,KAAwB;AAC/D;AACA,QAAIA,KAAK,KAAKL,MAAM,CAACC,IAAP,CAAYJ,aAAZ,EAA2BS,MAA3B,GAAoC,CAAlD,EAAqD;AACnD,aAAO,EAAE,GAAGH,KAAL;AAAY,SAACC,IAAD,GAAS,eAAcL,YAAa;AAAhD,OAAP;AACD;;AAED,UAAMQ,QAAQ,GAAGR,YAAjB;AACA,UAAMS,UAAU,GAAGX,aAAa,CAACO,IAAD,CAAhC,CAP+D,CAS/D;;AACAL,IAAAA,YAAY,GAAGS,UAAU,GAAG,CAA5B;AAEA,WAAO,EAAE,GAAGL,KAAL;AAAY,OAACC,IAAD,GAAS,eAAcG,QAAS,uBAAsBC,UAAW;AAA7E,KAAP;AACD,GAbM,EAaJ,EAbI,CAAP;AAcD,CAjBkC,GAAnC;;AAmBA,MAAMC,MAAM,GAAIL,IAAD,IAAmB,KAAIA,IAAI,CAACM,MAAL,CAAY,CAAZ,EAAeC,WAAf,EAA6B,GAAEP,IAAI,CAACQ,KAAL,CAAW,CAAX,CAAc,EAAnF;;AAEA,MAAMC,mBAAmB,GAAG,MAAa;AAAA;;AACvC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAQ,MAAM;AAC9C,WAAOI,MAAM,CAACC,IAAP,CAAYH,YAAZ,EAA0BI,MAA1B,CAAiC,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACvD,YAAMY,GAAG,GAAGP,MAAM,CAACL,IAAD,CAAlB;AACA,YAAMa,GAAG,GAAGC,MAAM,CAACC,UAAP,CAAkBrB,YAAY,CAACM,IAAD,CAA9B,CAAZ;AACA,aAAO,EAAE,GAAGD,KAAL;AAAY,SAACa,GAAD,GAAOC,GAAG,CAACG;AAAvB,OAAP;AACD,KAJM,EAIJ,EAJI,CAAP;AAKD,GANiC,CAAlC;AAQAzB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAM0B,QAAQ,GAAGrB,MAAM,CAACC,IAAP,CAAYH,YAAZ,EAA0BwB,GAA1B,CAA+BlB,IAAD,IAAU;AACvD,YAAMa,GAAG,GAAGC,MAAM,CAACC,UAAP,CAAkBrB,YAAY,CAACM,IAAD,CAA9B,CAAZ;;AAEA,YAAMmB,OAAO,GAAIC,eAAD,IAA0C;AACxD,cAAMR,GAAG,GAAGP,MAAM,CAACL,IAAD,CAAlB;AACAW,QAAAA,QAAQ,CAAEU,SAAD,KAAgB,EACvB,GAAGA,SADoB;AAEvB,WAACT,GAAD,GAAOQ,eAAe,CAACJ;AAFA,SAAhB,CAAD,CAAR;AAID,OAND,CAHuD,CAWvD;;;AACA,UAAIH,GAAG,CAACS,gBAAR,EAA0B;AACxBT,QAAAA,GAAG,CAACS,gBAAJ,CAAqB,QAArB,EAA+BH,OAA/B;AACD;;AAED,aAAO,MAAM;AACX;AACA,YAAIN,GAAG,CAACU,mBAAR,EAA6B;AAC3BV,UAAAA,GAAG,CAACU,mBAAJ,CAAwB,QAAxB,EAAkCJ,OAAlC;AACD;AACF,OALD;AAMD,KAtBgB,CAAjB;AAwBA,WAAO,MAAM;AACXF,MAAAA,QAAQ,CAACO,OAAT,CAAkBC,WAAD,IAAiB;AAChCA,QAAAA,WAAW;AACZ,OAFD;AAGD,KAJD;AAKD,GA/BQ,EA+BN,CAACd,QAAD,CA/BM,CAAT;AAiCA,SAAOD,KAAP;AACD,CA3CD;;GAAMD,mB;;AA6CN,eAAeA,mBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { breakpointMap } from \"../theme/base\";\n\ntype State = {\n  [key: string]: boolean;\n};\n\ntype MediaQueries = {\n  [key: string]: string;\n};\n\n/**\n * Can't use the media queries from \"base.mediaQueries\" because of how matchMedia works\n * In order for the listener to trigger we need have have the media query with a range, e.g.\n * (min-width: 370px) and (max-width: 576px)\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList\n */\nconst mediaQueries: MediaQueries = (() => {\n  let prevMinWidth = 0;\n\n  return Object.keys(breakpointMap).reduce((accum, size, index) => {\n    // Largest size is just a min-width of second highest max-width\n    if (index === Object.keys(breakpointMap).length - 1) {\n      return { ...accum, [size]: `(min-width: ${prevMinWidth}px)` };\n    }\n\n    const minWidth = prevMinWidth;\n    const breakpoint = breakpointMap[size];\n\n    // Min width for next iteration\n    prevMinWidth = breakpoint + 1;\n\n    return { ...accum, [size]: `(min-width: ${minWidth}px) and (max-width: ${breakpoint}px)` };\n  }, {});\n})();\n\nconst getKey = (size: string) => `is${size.charAt(0).toUpperCase()}${size.slice(1)}`;\n\nconst useMatchBreakpoints = (): State => {\n  const [state, setState] = useState<State>(() => {\n    return Object.keys(mediaQueries).reduce((accum, size) => {\n      const key = getKey(size);\n      const mql = window.matchMedia(mediaQueries[size]);\n      return { ...accum, [key]: mql.matches };\n    }, {});\n  });\n\n  useEffect(() => {\n    // Create listeners for each media query returning a function to unsubscribe\n    const handlers = Object.keys(mediaQueries).map((size) => {\n      const mql = window.matchMedia(mediaQueries[size]);\n\n      const handler = (matchMediaQuery: MediaQueryListEvent) => {\n        const key = getKey(size);\n        setState((prevState) => ({\n          ...prevState,\n          [key]: matchMediaQuery.matches,\n        }));\n      };\n\n      // Safari < 14 fix\n      if (mql.addEventListener) {\n        mql.addEventListener(\"change\", handler);\n      }\n\n      return () => {\n        // Safari < 14 fix\n        if (mql.removeEventListener) {\n          mql.removeEventListener(\"change\", handler);\n        }\n      };\n    });\n\n    return () => {\n      handlers.forEach((unsubscribe) => {\n        unsubscribe();\n      });\n    };\n  }, [setState]);\n\n  return state;\n};\n\nexport default useMatchBreakpoints;\n"]},"metadata":{},"sourceType":"module"}