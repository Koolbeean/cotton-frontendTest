{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["export type ColumnType<T> = {\r\n  name: string;\r\n  label?: string;\r\n  hidden?: boolean;\r\n  sort?: ((a: RowType<T>, b: RowType<T>) => number) | undefined;\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  render?: ({ value, row }: { value: any; row: T }) => React.ReactNode;\r\n  headerRender?: HeaderRenderType;\r\n};\r\n\r\nexport type ColumnStateType<T> = {\r\n  name: string;\r\n  label: string;\r\n  hidden: boolean;\r\n  sort?: ((a: RowType<T>, b: RowType<T>) => number) | undefined;\r\n  sorted: {\r\n    on: boolean;\r\n    asc?: boolean;\r\n  };\r\n  headerRender?: HeaderRenderType;\r\n};\r\n\r\nexport type HeaderRenderType = ({ label }: { label: React.ReactNode }) => React.ReactNode;\r\n\r\n// this is the type saved as state and returned\r\nexport type HeaderType<T> = {\r\n  name: string;\r\n  label?: string;\r\n  hidden?: boolean;\r\n  sorted: {\r\n    on: boolean;\r\n    asc?: boolean;\r\n  };\r\n  sort?: ((a: RowType<T>, b: RowType<T>) => number) | undefined;\r\n  render: () => React.ReactNode;\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DataType = { [key: string]: any };\r\n\r\nexport type ColumnByNamesType<T> = {\r\n  [key: string]: ColumnType<T>;\r\n};\r\n\r\nexport type RenderFunctionType<T> = ({ value, row }: RenderFunctionArgsType<T>) => React.ReactNode | undefined;\r\n\r\ntype RenderFunctionArgsType<T> = {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  value: any;\r\n  row: T;\r\n};\r\n\r\nexport type ColumnByNameType<T> = Omit<Required<ColumnType<T>>, \"name\" | \"sort\">;\r\n\r\nexport interface RowType<T extends DataType> {\r\n  id: number;\r\n  cells: CellType[];\r\n  hidden?: boolean;\r\n  selected?: boolean;\r\n  original: T;\r\n}\r\n\r\nexport type CellType = {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  value: any;\r\n  render: () => React.ReactNode;\r\n};\r\n\r\nexport interface UseTableTypeParams<T extends DataType> {\r\n  columns: ColumnType<T>[];\r\n  data: T[];\r\n  options?: {\r\n    sortable?: boolean;\r\n    selectable?: boolean;\r\n    filter?: (row: RowType<T>[]) => RowType<T>[];\r\n    filterOn?: boolean;\r\n  };\r\n}\r\n\r\nexport interface UseTablePropsType<T> {\r\n  columns: ColumnType<T>[];\r\n  data: T[];\r\n  options?: {\r\n    sortable?: boolean;\r\n    selectable?: boolean;\r\n    filter?: (row: RowType<T>[]) => RowType<T>[];\r\n  };\r\n}\r\n\r\nexport interface UseTableOptionsType<T> {\r\n  sortable?: boolean;\r\n  selectable?: boolean;\r\n  pagination?: boolean;\r\n  sortColumn?: string;\r\n  filter?: (row: RowType<T>[]) => RowType<T>[];\r\n}\r\n\r\nexport interface UseTableReturnType<T> {\r\n  headers: HeaderType<T>[];\r\n  originalRows: RowType<T>[];\r\n  rows: RowType<T>[];\r\n  selectedRows: RowType<T>[];\r\n  dispatch: React.Dispatch<TableAction<T>>;\r\n  toggleSort: (columnName: string, isAscOverride?: boolean) => void;\r\n  selectRow: (id: number) => void;\r\n  toggleAll: () => void;\r\n  setSearchString: (searchString: string) => void;\r\n  toggleAllState: boolean;\r\n  pagination: PaginatorType;\r\n}\r\n\r\ntype PaginatorType = {\r\n  nextPage: () => void;\r\n  prevPage: () => void;\r\n  page: number;\r\n  perPage: number;\r\n  canNext: boolean;\r\n  canPrev: boolean;\r\n};\r\n\r\nexport type TableState<T extends DataType> = {\r\n  columnsByName: ColumnByNamesType<T>;\r\n  columns: ColumnStateType<T>[];\r\n  rows: RowType<T>[];\r\n  originalRows: RowType<T>[];\r\n  selectedRows: RowType<T>[];\r\n  filterOn: boolean;\r\n  sortColumn: string | null | undefined;\r\n  toggleAllState: boolean;\r\n  pagination: PaginatorType;\r\n  paginationEnabled: boolean;\r\n};\r\n\r\nexport type TableAction<T extends DataType> =\r\n  | { type: \"TOGGLE_SORT\"; columnName: string; isAscOverride?: boolean }\r\n  | { type: \"SELECT_ROW\"; rowId: number }\r\n  | { type: \"GLOBAL_FILTER\"; filter: (row: RowType<T>[]) => RowType<T>[] }\r\n  | { type: \"SEARCH_STRING\"; searchString: string }\r\n  | { type: \"GLOBAL_FILTER_OFF\" }\r\n  | { type: \"SET_ROWS\"; data: RowType<T>[] }\r\n  | { type: \"NEXT_PAGE\" }\r\n  | { type: \"PREV_PAGE\" }\r\n  | { type: \"TOGGLE_ALL\" };\r\n"]},"metadata":{},"sourceType":"module"}